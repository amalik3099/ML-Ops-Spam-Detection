AWSTemplateFormatVersion: "2010-09-09"
Description: 'ML Ops - Automatic spam detection'

Parameters:
  E1Endpoint:
    Type: String
    Default: "sms-spam-classifier-mxnet-2022-04-12-22-33-31-644"
  S3BucketName:
    Type: String
    Default: "s3-receive-emails-bucket-cf"

Resources:
  AdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - sagemaker.amazonaws.com
                - cloudformation.amazonaws.com
                - ses.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: admin-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "spam-data-bucket-cf"

  s3EmailStorageBucket:
    Type: AWS::S3::Bucket 
    DependsOn: LambdaInvokePermission
    Properties:
      BucketName: !Ref S3BucketName 
      NotificationConfiguration: 
        LambdaConfigurations: 
          - Event: s3:ObjectCreated:* 
            Function: !GetAtt LambdaFunction.Arn


  s3EmailStorageBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3EmailStorageBucket  
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSESPuts
            Effect: Allow
            Principal:
              Service: 'ses.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref s3EmailStorageBucket
                - /*

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: ""
      Environment: 
        Variables: 
          ENDPOINT_NAME: "sms-spam-classifier-mxnet-2022-04-12-22-33-31-644"
      FunctionName: "spam-classifier-cf"
      Handler: "lambda_function.lambda_handler"
      Architectures: 
        - "x86_64"
      Code: 
        S3Bucket: "cf-spam-lambda-bucket"
        S3Key: "spam-classifier-3a903ec5-ec79-46bb-9f38-eae889fbcc4c.zip"
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/s3-access-role"
      Runtime: "python3.7"
      Timeout: 3
      TracingConfig: 
        Mode: "PassThrough"
      Layers: 
        - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:pandas:1"

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: LambdaFunction
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub arn:aws:s3:::${S3BucketName}

  ReceiptRuleSet:
    Type: 'AWS::SES::ReceiptRuleSet'
    Properties:
      RuleSetName: cf-receiving-email-rule 

  ReceiptRule: 
    Type: 'AWS::SES::ReceiptRule'
    Properties:
      RuleSetName: !Ref ReceiptRuleSet  
      Rule:
        Name: cf-receiving-email-reciept
        Enabled: true
        ScanEnabled: false
        Actions:
          - S3Action:
              BucketName: !Ref s3EmailStorageBucket 
